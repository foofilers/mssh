#!/usr/bin/env python3
import argparse
import os
import sys
from mssh.config import MsshConfig

cnf = MsshConfig().load()


def main():
	parser = argparse.ArgumentParser(description='Ssh Hub Command line')
	parser.add_argument('env', help='Environment', type=str)
	parser.add_argument('product', help='Product name', type=str)
	parser.add_argument('server', help='Server name or alias', type=str)
	parser.add_argument('user', help='User', type=str)
	args = parser.parse_args(sys.argv[1:])

	if not (args.env in cnf.environments):
		print("Environment %s not found" % str(args.env), file=sys.stderr)
		sys.exit(1)
	if not (args.product in cnf.environments[args.env]):
		print("Product %s not found" % str(args.product), file=sys.stderr)
		sys.exit(1)
	if not (args.server in cnf.environments[args.env][args.product]['servers']):
		print("Server %s not found" % str(args.server), file=sys.stderr)
		sys.exit(1)

	try:
		srv = cnf.environments[args.env][args.product]['servers'][args.server]
		user_found = False
		for us in srv['users']:
			if us == args.user:
				user_found = True
		if user_found:
			cmd = "ssh %s@%s" % (args.user, srv.host)
			print(cmd)
			os.system(cmd)
		else:
			print("User %s not found" % args.user, file=sys.stderr)
			sys.exit(1)

	except KeyError as e:
		print("Environment %s not found" % str(e), file=sys.stderr)


if __name__ == '__main__':
	main()
